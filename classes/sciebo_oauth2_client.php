<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * Client Class for oauth2sciebo admin tool
 *
 * @package    tool_oauth2sciebo
 * @copyright  2016 Westfälische Wilhelms-Universität Münster (WWU Münster)
 * @author     Projektseminar Uni Münster
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
// Supposed to make require once in other files later unnecessary.

namespace tool_oauth2sciebo;

defined('MOODLE_INTERNAL') || die();

class sciebo_oauth2_client extends oauth2_client {
    /**
     *
     * @return string
     */
    public function token_url() {
        return 'http://localhost/owncloud/index.php/apps/oauth2/api/v1/token';
    }

    /**
     * Is used by get_login url
     *
     * @return string
     */
    public function auth_url() {
        return 'http://localhost/owncloud/index.php/apps/oauth2/authorize';
    }
    /**
     * Constructor.
     *
     * @param string $clientid
     * @param string $clientsecret
     * @param moodle_url $returnurl
     *
     */
    public function __construct($clientid, $clientsecret, $returnurl) {
        parent::__construct($clientid, $clientsecret, $returnurl, '');

    }

    /**
     * Is the user logged in? Note that if this is called
     * after the first part of the authorisation flow the token
     * is upgraded to an accesstoken.
     *
     * @return boolean true if logged in
     */
    /*public function is_logged_in() {
        // Has the token expired?
        if (isset($this->accesstoken->expires) && time() >= $this->accesstoken->expires) {
            $this->log_out();
            return false;
        }

        // We have a token so we are logged in.
        if (isset($this->accesstoken->token)) {
            return true;
        }

        // If we've been passed then authorization code generated by the
        // authorization server try and upgrade the token to an access token.
        $code = optional_param('oauth2code', null, PARAM_RAW);
        if ($code && $this->upgrade_token($code)) {
            return true;
        }

        return false;
    }*/

    /**
     * Callback url where the request is returned to.
     *
     * @return moodle_url url of callback
     */
// TODO need for own callback_url
    /*public static function callback_url() {
        global $CFG;

        return new moodle_url('/admin/oauth2callback.php');
    }*/

    /**
     * Returns the login link for this oauth request
     *
     * @return moodle_url login url
     */

    public function get_login_url() {

        $callbackurl = self::callback_url();
        $url = new moodle_url($this->auth_url(),
            array('client_id' => $this->clientid,
                'response_type' => 'code', // TODO bearer?
                'redirect_uri' => $callbackurl->out(false),
                'state' => $this->returnurl->out_as_local_url(false),
                'scope' => $this->scope,
            ));

        return $url;
    }

    /**
     * Upgrade a authorization token from oauth 2.0 to an access token
     *
     * @param string $code the code returned from the oauth authenticaiton
     * @return boolean true if token is upgraded succesfully
     */
    /*public function upgrade_token($code) {

    }*/

    /**
     * Logs out of a oauth request, clearing any stored tokens
     */
    /*public function log_out() {
        $this->store_token(null);
    }*/

    /**
     * Make a HTTP request, adding the access token we have
     *
     * @param string $url The URL to request
     * @param array $options
     * @return bool
     */
    /*protected function request($url, $options = array()) {
        $murl = new moodle_url($url);

        if ($this->accesstoken) {
            if ($this->use_http_get()) {
                // If using HTTP GET add as a parameter.
                $murl->param('access_token', $this->accesstoken->token);
            } else {
                $this->setHeader('Authorization: Bearer '.$this->accesstoken->token);
            }
        }

        return parent::request($murl->out(false), $options);
    }*/

    /**
     * Multiple HTTP Requests
     * This function could run multi-requests in parallel.
     *
     * @param array $requests An array of files to request
     * @param array $options An array of options to set
     * @return array An array of results
     */
   /* protected function multi($requests, $options = array()) {
        if ($this->accesstoken) {
            $this->setHeader('Authorization: Bearer '.$this->accesstoken->token);
        }
        return parent::multi($requests, $options);
    }*/

    /**
     * Returns the tokenname for the access_token to be stored
     * through multiple requests.
     *
     * The default implentation is to use the classname combiend
     * with the scope.
     *
     * @return string tokenname for prefernce storage
     */
    /*protected function get_tokenname() {
        // This is unusual but should work for most purposes.
        return get_class($this).'-'.md5($this->scope);
    }*/

    /**
     * Store a token between requests. Currently uses
     * session named by get_tokenname
     *
     * @param stdClass|null $token token object to store or null to clear
     */
   /* protected function store_token($token) {
        global $SESSION;

        $this->accesstoken = $token;
        $name = $this->get_tokenname();

        if ($token !== null) {
            $SESSION->{$name} = $token;
        } else {
            unset($SESSION->{$name});
        }
    }*/

    /**
     * Retrieve a token stored.
     *
     * @return stdClass|null token object
     */
    /*protected function get_stored_token() {
        global $SESSION;

        $name = $this->get_tokenname();

        if (isset($SESSION->{$name})) {
            return $SESSION->{$name};
        }

        return null;
    }*/

    /**
     * Get access token.
     *
     * This is just a getter to read the private property.
     *
     * @return string
     */
   /* public function get_accesstoken() {
        return $this->accesstoken;
    }*/

    /**
     * Get the client ID.
     *
     * This is just a getter to read the private property.
     *
     * @return string
     */
   /* public function get_clientid() {
        return $this->clientid;
    }*/

    /**
     * Get the client secret.
     *
     * This is just a getter to read the private property.
     *
     * @return string
     */
   /* public function get_clientsecret() {
        return $this->clientsecret;
    }*/

    /**
     * Should HTTP GET be used instead of POST?
     * Some APIs do not support POST and want oauth to use
     * GET instead (with the auth_token passed as a GET param).qq
     *
     * @return bool true if GET should be used
     */
    /*protected function use_http_get() {
        return false;
    }*/
}